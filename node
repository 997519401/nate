 - fs
  - Node.js内置的fs模块就是文件系统模块，负责读写文件。
  - 和所有其它JavaScript模块不同的是，fs模块同时提供了异步和同步的方法。

  按照JavaScript的标准，异步读取一个文本文件的代码如下：
```
 'use strict';

 var fs = require('fs');

 fs.readFile('sample.txt', 'utf-8', function (err, data) {
     if (err) {
         console.log(err);
     } else {
         console.log(data);
     }
 });

```
- sample.txt文件必须在当前目录下，且文件编码为utf-8。

- 当读取二进制文件时，不传入文件编码时，回调函数的data参数    将返回一个Buffer对象。在Node.js中，Buffer对象就是一个包含零个或任意个字节的数组（注意和Array不同）。
- Buffer对象可以和String作转换，例如，把一个Buffer对象转换成String：



===================================================================

函数的副作用

If you cannot hear the sound of the genuine in you, you will all of your life spend your days on the ends of strings that somebody else pulls.

函数的副作用
函数副作用 指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数。



函数副作用会给程序设计带来不必要的麻烦，给程序带来十分难以查找的错误，并且降低程序的可读性。严格的函数式语言要求函数必须无副作用。



函数的副作用相关的几个概念， Pure Function、 Impure Function、 Referential Transparent。



纯函数 ( Pure Function )

输入输出数据流全是显式（Explicit）的。 显式（Explicit）的意思是，函数与外界交换数据只有一个唯一渠道——参数和返回值。函数从函数外部接受的所有输入信息都通过参数传递到该函数内部。函数输出到函数外部的所有信息都通过返回值传递到该函数外部。



非纯函数 ( Impure Function )

与之相反。 隐式（Implicit）的意思是，函数通过参数和返回值以外的渠道，和外界进行数据交换。比如读取/修改全局变量，都叫作以隐式的方式和外界进行数据交换。



引用透明 ( Referential Transparent )

引用透明的概念与函数的副作用相关，且受其影响。 如果程序中两个相同值得表达式能在该程序的任何地方互相替换，而不影响程序的动作，那么该程序就具有引用透明性。它的优点是比非引用透明的语言的语义更容易理解，不那么晦涩。纯函数式语言没有变量，所以它们都具有引用透明性。



以下示例说明了引用透明与函数副作用的结合

1
2
3
result1 = (fun(a) + b) / (fun(a) -c);
temp = fun(a);
result2 = (temp + b) / (temp -c);
如果函数没有副作用，那么result1和result2将是等价的。然而如果fun有副作用，比如让b或c加1，那么result1和result2将不相等。因此，副作用违背了引用透明性。

在JavaScript中，引入了函数。但显然JS中的函数可以访问、修改全局变量（或定义在函数外的变量），如下

1
2
3
4
5
var a = 5;
function fun(){
     a = 10;
}
fun(); // a 变成了10
JS中要想保证函数无副作用这项特性，只能依靠编程人员的习惯，即

1，函数入口使用参数运算，而不修改它

2，函数内不修改函数外的变量，如全局变量

3，运算结果通过函数返回给外部（出口）



============================================================================


setInterval设置１０００，却１分钟执行一次
```
startClock();
var clock = null;
var clockRunning = false;

function showTime() {
    var endTime = new Date("June 30,2017 23:59:59");
    var nowTime = new Date();
    var time = endTime - nowTime;
    var $day = parseInt(time/(1000*60*60*24));
    var $hour = endTime.getHours() - nowTime.getHours();
    var $minute = endTime.getMinutes() - nowTime.getMinutes();
    var $second = endTime.getSeconds() - nowTime.getSeconds();

    if($second < 0) {
        $second = 60 + $second;
        $minute  = $minute - 1;
    }

    if($minute < 0) {
        $minute = 60 + $minute;
        $hour = $hour - 1;
    }

    if($hour < 0) {
        $hour = 24 + $hour;
        $day = $day - 1;
    }

    $(".day").find("b").html($day);
    $(".hour").html($hour);
    $(".minute").html($minute);
    $(".second").html($second);
}

function stopClock() {
    if(clockRunning)
        clearInterval(clock);
    clockRunning = false;
}

function startClock() {
    clock = setInterval('showTime()', 1000);
}

```
